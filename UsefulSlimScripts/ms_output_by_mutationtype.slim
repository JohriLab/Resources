//Slim script to write different mutation types into different ms outputs
//Here m1 is neutral and m2 is selected.
//We sample a set of genomes and then write the sites with m1 mutations to one file and those with m2 mutations to another file.
//How to run:
//slim -d "d_folder='test'" -d "d_repID='replicate number'" ms_output_by_mutationtype.slim

function (string)write_ms_file(object sampled_genomes, string f_m1, string f_m2)
    {
    writeFile(filePath=f_m1, contents="//", append = F);
    writeFile(filePath=f_m2, contents="//", append = F);
    // get the unique mutations in the sample, sorted by position
    m_m1 = sortBy(unique(sampled_genomes.mutationsOfType(m1)), "position");
    m_m2 = sortBy(unique(sampled_genomes.mutationsOfType(m2)), "position");
    // print the number of segregating sites
    writeFile(filePath=f_m1, contents=paste("segsites: " + size(m_m1)), append = T);
    writeFile(filePath=f_m2, contents=paste("segsites: " + size(m_m2)), append = T);

    // print the positions
    positions_m1 = format("%.15f", m_m1.position / sim.chromosome.lastPosition);
    positions_m2 = format("%.15f", m_m2.position / sim.chromosome.lastPosition);
    writeFile(filePath=f_m1, contents="positions: " + paste(positions_m1, sep=" "), append = T);
    writeFile(filePath=f_m2, contents="positions: " + paste(positions_m2, sep=" "), append = T);
    
    // print the sampled genomes
    for (genome in sampled_genomes)
        {
        hasMuts_m1 = (match(m_m1, genome.mutations) >= 0);
        writeFile(filePath=f_m1, contents=paste(asInteger(hasMuts_m1), sep=""), append = T);
        hasMuts_m2 = (match(m_m2, genome.mutations) >= 0);
        writeFile(filePath=f_m2, contents=paste(asInteger(hasMuts_m2), sep=""), append = T);
        }
    return (paste(f_m1, "and", f_m2, "written", sep=" "));                                    
    }
    
initialize() {
	initializeMutationRate(1e-7);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", -0.01);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", c(m1, m2), c(1,1));
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, 9999);
	initializeRecombinationRate(1e-7);
}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", 500);
}

// output samples of 10 genomes periodically, all fixed mutations at end
5000 late() { 
	//sample genomes:
    sampledGen = sample(p1.genomes, 100, replace=F);
    
    //write out neutral and selected mutations in different ms files:
    result_m1 = paste0(d_folder, "/output", d_repID , "_neutral.ms");
    result_m2 = paste0(d_folder, "/output", d_repID , "_selected.ms");
    write_ms_file(sampledGen, result_m1, result_m2);
    
    //write out all mutations in the slim full output format (if you want to check)
    sampledGen.output(filePath=d_folder + "/output" + d_repID + "_all.txt", append=F);
	}